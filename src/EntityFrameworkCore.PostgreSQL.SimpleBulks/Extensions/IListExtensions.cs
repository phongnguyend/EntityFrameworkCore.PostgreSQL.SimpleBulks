using Npgsql;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Linq;

namespace EntityFrameworkCore.PostgreSQL.SimpleBulks.Extensions;

public static class IListExtensions
{
    public static void SqlBulkCopy<T>(this IEnumerable<T> data, string tableName, IEnumerable<string> propertyNames, IReadOnlyDictionary<string, string> columnNameMappings, bool addIndexNumberColumn, NpgsqlConnection connection, NpgsqlTransaction transaction, BulkOptions options = null)
    {
        options ??= new BulkOptions()
        {
            BatchSize = 0,
            Timeout = 30,
        };

        var properties = TypeDescriptor.GetProperties(typeof(T));

        var updatablePros = new List<PropertyDescriptor>();
        foreach (PropertyDescriptor prop in properties)
        {
            if (propertyNames.Contains(prop.Name))
            {
                updatablePros.Add(prop);
            }
        }

        var columnNamesToInsert = propertyNames.ToList();

        if (addIndexNumberColumn)
        {
            columnNamesToInsert.Add(Constants.AutoGeneratedIndexNumberColumn);
        }

        var sql = $"COPY {tableName} ({string.Join(',', columnNamesToInsert.Select(x => $"\"{GetDbColumnName(x, columnNameMappings)}\""))}) FROM STDIN (FORMAT binary)";

        using var writer = connection.BeginBinaryImport(sql);

        long idx = 0;

        foreach (T item in data)
        {
            writer.StartRow();

            foreach (var name in columnNamesToInsert)
            {
                var prop = updatablePros.FirstOrDefault(x => x.Name == name);

                if (prop == null)
                {
                    continue;
                }

                var type = Nullable.GetUnderlyingType(prop.PropertyType) ?? prop.PropertyType;
                var tempValue = prop.GetValue(item);
                var value = type.IsEnum && tempValue != null ? (int)tempValue : tempValue;

                writer.Write(value);
            }

            if (addIndexNumberColumn)
            {
                writer.Write(idx);
            }

            idx++;
        }

        writer.Complete();
    }

    private static string GetDbColumnName(string columName, IReadOnlyDictionary<string, string> columnNameMappings)
    {
        if (columnNameMappings == null)
        {
            return columName;
        }

        return columnNameMappings.TryGetValue(columName, out string value) ? value : columName;
    }
}
